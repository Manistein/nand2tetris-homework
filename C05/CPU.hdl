// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Address Register 
    Mux16(a = addressRegisterIn, b = inM, sel = instruction[12], out = yOut);
    ALU(x = xOut, y = yOut, 
        zx = instruction[11], 
        nx = instruction[10], 
        zy = instruction[9],
        ny = instruction[8],
        f  = instruction[7],
        no = instruction[6],
        out = aluOut,
        out = outM, 
        zr = zrOut,
        ng = ngOut);

    Mux16(a = instruction, b = aluOut, sel = instruction[15], out = registerIn);

    Not(in = instruction[15], out = notLeftmostBit);
    Or(a = notLeftmostBit, b = instruction[5], out = loadAddress);

    // address register
    ARegister(in = registerIn, load = loadAddress, out[0..14] = addressM, out = addressRegisterIn);

    // data register
    And(a = instruction[15], b = instruction[4], out = loadData);
    DRegister(in = registerIn, load = loadData, out = xOut);

    And(a = instruction[15], b= instruction[3], out = canWriteM);
    Mux(a = false, b = true, sel = canWriteM, out = writeM);


    // > 0; jump
    Mux(a = true, b = false, sel = ngOut, out = greater);
    Mux(a = greater, b = false, sel = zrOut, out = greaterOut);

    // == 0; jump
    Mux(a = false, b = true, sel = zrOut, out = equalOut);

    // >= 0; jump
    Mux(a = true, b= false, sel = ngOut, out = geOut);

    // < 0; jump
    Mux(a = false, b = true, sel = ngOut, out = lessOut);

    // != 0; jump
    Mux(a = true, b = false, sel = zrOut, out = neOut);

    // <= 0; jump
    Mux(a = false, b = true, sel = ngOut, out = lesser);
    Mux(a = lesser, b = true, sel = zrOut, out = leOut);

    Mux(a=false,b=lessOut,sel=instruction[2],out=v1);
    Mux(a=greaterOut,b=neOut,sel=instruction[2],out=v2);
    Mux(a=equalOut,b=leOut,sel=instruction[2],out=v3);
    Mux(a=geOut,b=true,sel=instruction[2],out=v4);

    Mux(a=v1,b=v3,sel=instruction[1],out=r1);
    Mux(a=v2,b=v4,sel=instruction[1],out=r2);

    Mux(a=r1,b=r2,sel=instruction[0],out=o1);
    Mux(a=false,b=o1,sel=instruction[15],out=loadPC);

    PC(in = addressRegisterIn, load = loadPC, reset = reset, inc = true, out[0..14] = pc);
}