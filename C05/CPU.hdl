// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Address Register 
    Mux16(a = addressRegisterIn, b = inM, sel = instruction[12], out = yOut);
    ALU(x = xOut, y = yOut, 
        zx = instruction[11], 
        nx = instruction[10], 
        zy = instruction[9],
        ny = instruction[8],
        f  = instruction[7],
        no = instruction[6],
        out = aluOut,
        zr = zrOut,
        ng = ngOut);

    Mux16(a = instruction, b = aluOut, sel = instruction[15], out = registerIn);

    Not(in = instruction[15], out = notLeftmostBit);
    Or(a = notLeftmostBit, b = instruction[5], out = loadAddress);

    // address register
    Register(in = registerIn, load = loadAddress, out[0..14] = addressM, out = addressRegisterIn, out = jmpAddress);

    // data register
    And(a = instruction[15], b = instruction[4], out = loadData);
    Register(in = registerIn, load = loadData, out = outM, out = xOut, out[15] = dSignificant, out[0..7] = dLowBits, out[8..15] = dHighBits);

    And(a = instruction[15], b= instruction[3], out = canWriteM);
    Mux(a = false, b = true, sel = canWriteM, out = writeM);

    PC(in = loop, load = false, reset = reset, inc = true, out = loop, out = jmpPC);

    Or8Way(in = dLowBits, out = lowBits);
    Or8Way(in = dHighBits, out = highBits);
    Or(a = lowBits, b = highBits, out = zeroCheck);

    // > 0; jump
    Mux16(a = jmpAddress, b = jmpPC, sel = dSignificant, out = greater);
    Mux16(a = jmpPC, b = greater, sel = zeroCheck, out = greaterOut);

    // == 0; jump
    Mux16(a = jmpAddress, b = jmpPC, sel = zeroCheck, out = equalOut);

    // >= 0; jump
    Mux16(a = jmpAddress, b= jmpPC, sel = dSignificant, out = geOut);

    // < 0; jump
    Mux16(a = jmpPC, b = jmpAddress, sel = dSignificant, out = lessOut);

    // != 0; jump
    Mux16(a = jmpPC, b = jmpAddress, sel = zeroCheck, out = neOut);

    // <= 0; jump
    Mux16(a = jmpPC, b = jmpAddress, sel = dSignificant, out = lesser);
    Mux16(a = jmpAddress, b = lesser, sel = zeroCheck, out = leOut);

    Mux8Way16(a = jmpPC, b = greaterOut, c = equalOut, d = geOut, e = lessOut, f = neOut, g = leOut, h = jmpAddress, sel = instruction[0..2], out = pcOut); 

    Mux16(a = jmpPC, b = pcOut, sel = instruction[15], out[0..14] = pc);
}